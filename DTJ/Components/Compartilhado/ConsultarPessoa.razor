@attribute [StreamRendering]
<div>
    <InputText @bind-Value="NomePesquisado" class="form-control"  ></InputText>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <td>Cod</td>
                <td>Nome</td>
                <td>Telefone</td>
                <td>CPF</td>
                <td>Ações</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in PessoaList)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Nome</td>
                    <td>@p.Telefone</td>
                    <td>@p.CPF</td>
                    <td>
                        <a class="btn btn-info" href="/clientes/editar/@p.Id">Editar</a>
                        <a class="btn btn-danger" href="/clientes/excluir/@p.Id">Excluir</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<nav aria-label="Navegação de página exemplo">
    <ul class="pagination justify-content-center">
        <li class="@(PagAtual==1 ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual-1))" tabindex="-1">Anterior</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            int pag = i;
            <li class="page-item"><a class="page-link" @onclick="@(() => MudarPagina(pag))">@i</a></li>
        }
        <li class="@(TotalPages==PagAtual ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual+1))">Próximo</a>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public List<Pessoa> Pessoas { get; set; }
    [Parameter]
    public int Pegar { get; set; }
    public IEnumerable<Pessoa> PessoaList { get; set; } = Enumerable.Empty<Pessoa>();

    public int PagAtual { get; set; } = 1;
    public int PagTamanho { get; set; } = 6; 
    public int TotalPages{ get; set; }

    private string _nomePesquisado;
    public string? NomePesquisado 
    { 
        get { return _nomePesquisado; }
        set 
        { 
            _nomePesquisado = value.Trim(); 
            FiltrarNome(); 
        }
    }

    protected override void OnInitialized()
    {
        if (Pegar > 0)
            PagTamanho = Pegar;

        if (Pessoas.Count > 0)
        {
            TotalPages = (int)Math.Ceiling(Pessoas.Count() / (double)PagTamanho);
            PessoaList = Pessoas.Skip((PagAtual - 1) * PagTamanho).Take(PagTamanho).OrderBy(n => n.Nome);

        }
    }

    public void MudarPagina(int page)
    {
        if (page>0 && page <= TotalPages)
        {
            PagAtual = page;
            PessoaList = Pessoas.Skip((page - 1) * PagTamanho).Take(PagTamanho).OrderBy(n => n.Nome);
        }
    }

    private void FiltrarNome()
    {
        if (!string.IsNullOrEmpty(NomePesquisado))
        {
            if (Validacoes.ApenasNumeros(NomePesquisado))
            {
                var result = Pessoas.Where(x => x.CPF == NomePesquisado).Take(PagTamanho).OrderBy(n => n.Nome);
                if (result.Count() == 0)
                    result = Pessoas.Where(x => x.Telefone == NomePesquisado).Take(PagTamanho).OrderBy(n => n.Nome);

                PessoaList = result;
            }
            else
            {
                PessoaList = Pessoas.Where(x => x.Nome.ToLower().Contains(NomePesquisado.ToLower())).Take(PagTamanho).OrderBy(n => n.Nome);
                TotalPages = (int)Math.Ceiling(PessoaList.Count() / (double)PagTamanho);
            }
        }
        else
        {
            TotalPages = (int)Math.Ceiling(Pessoas.Count() / (double)PagTamanho);
            PessoaList = Pessoas.Skip((PagAtual - 1) * PagTamanho).Take(PagTamanho).OrderBy(n => n.Nome);
        }
    }


}
