@page "/tarefas/{pegar:int?}"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject ApplicationDbContext _context
@inject ITelegramService _telegram 

@implements IDisposable

<PageTitle>Lista de Tarefas</PageTitle>

<div class="row">
    <div class="col-md-4 mb-1">
        <a href="/tarefas/criar" class="btn btn-primary">Nova Tarefa</a>
    </div>
    <div class="col-md-4">
        <InputCheckbox @bind-Value="VisualizaTodos" />
        <label class="form-label">Visualizar Todos</label>
    </div>
    <div class="col-md-4">
        <InputCheckbox @bind-Value="HabilitaConsultaTelegram" />
        <label class="form-label">Habilitar Consulta via Telegram</label>
    </div>
</div>
<div class="row">
    <InputText @bind-Value="TarefaPesquisada" class="form-control"></InputText>
</div>


@if (Tarefas.Count >0)
{
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <td>Cod</td>
                <td>Descricao</td>
                <td>Tipo</td>
                <td>Data Criação</td>
                <td>Prazo Final</td>
                <td>*</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in Tarefas)
            {
                <tr style="@FundoGrid(t.Concluido)" >
                <td>@t.Id</td>
                <td>@t.Descricao</td>
                <td>@t.Tipo</td>
                <td>@t.DataCriacao</td>
                <td>@t.DataVencimento</td>
                <td>
                    <a class="btn btn-info" href="/tarefas/editar/@t.Id">
                    Editar
                    </a>
                </td>
                </tr>
              

                    
            }
        </tbody>
    </table>
</div>
}
else 
{
    <a>Loading....</a>
}
<nav >
    <ul class="pagination justify-content-center">
        <li class="@(PagAtual==1 ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual-1))" tabindex="-1">Anterior</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            int pag = i;
            <li class="page-item"><a class="page-link" @onclick="@(() => MudarPagina(pag))">@i</a></li>
        }
        <li class="@(TotalPages==PagAtual ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual+1))">Próximo</a>
        </li>
    </ul>
</nav>


@code {
    [Parameter]
    public int Pegar { get; set; }
    public int PagAtual { get; set; } = 1;
    public int TotalPages { get; set; }

    private string _tarefaPesquisada;
    public string? TarefaPesquisada 
    {
        get { return _tarefaPesquisada; }
        set { _tarefaPesquisada = value.Trim(); AtualizarLista(); }
    }
    private bool _visualizaTodos;
    public bool VisualizaTodos 
    {
        get { return _visualizaTodos; }
        set 
        { 
            _visualizaTodos = value;
            MudarPagina(1);
        }
    }
    private bool _habilitaConsultaTelegram;
    public bool HabilitaConsultaTelegram 
    { 
        get { return _habilitaConsultaTelegram; }
        set 
        { 
            _habilitaConsultaTelegram = value;
            _telegram.LerTelegram(value);
        }
    }

    public List<Tarefa> Tarefas { get; set; } = new();
    public List<Tarefa> TarefasBase { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        if (Pegar == 0)
            Pegar = 6;
        TarefasBase = await _context.Tarefas.AsNoTracking().ToListAsync();
        VisualizaTodos = false;

        TotalPages = (int)Math.Ceiling(TarefasBase.Where(x => x.Concluido == false).Count() / (decimal)Pegar);

        Tarefas = TarefasBase.Where(x => x.Concluido == false)
            .Skip((PagAtual - 1) * Pegar).Take(Pegar).OrderByDescending(x => x.DataVencimento)
            .ToList();

    }

    private void AtualizarLista()
    {
        Pegar = Pegar == 0 ? 1 : Pegar;
        if (VisualizaTodos && !string.IsNullOrEmpty(TarefaPesquisada))
        {
            TotalPages = (int)Math.Ceiling(TarefasBase.Where(x => x.Descricao.ToLower().Contains(TarefaPesquisada.ToLower())).Count() / (decimal)Pegar);
            Tarefas = TarefasBase.Where(x => x.Descricao.ToLower().Contains(TarefaPesquisada.ToLower()))
            .Skip((PagAtual - 1) * Pegar).Take(Pegar)
            .OrderByDescending(x => x.DataVencimento).ToList();
        }
        else if (VisualizaTodos && string.IsNullOrEmpty(TarefaPesquisada))
        {
            TotalPages = (int)Math.Ceiling(TarefasBase.Count / (decimal)Pegar);
            Tarefas = TarefasBase.Skip((PagAtual - 1) * Pegar).Take(Pegar)
            .OrderByDescending(x => x.DataVencimento).ToList();
        }
        else if (!VisualizaTodos && !string.IsNullOrEmpty(TarefaPesquisada))
        {
            TotalPages = (int)Math.Ceiling(TarefasBase.Where(x => x.Concluido == false && x.Descricao.ToLower().Contains(TarefaPesquisada.ToLower())).Count() / (decimal)Pegar);
            Tarefas = TarefasBase.Where(x => x.Concluido == false && x.Descricao.ToLower().Contains(TarefaPesquisada.ToLower()))
           .Skip((PagAtual - 1) * Pegar).Take(Pegar).OrderBy(x => x.DataVencimento)
           .ToList();
        }
        else
        {
            TotalPages = (int)Math.Ceiling(TarefasBase.Where(x => x.Concluido == false).Count() / (decimal)Pegar);
            Tarefas = TarefasBase.Where(x => x.Concluido == false)
           .Skip((PagAtual - 1) * Pegar).Take(Pegar).OrderBy(x => x.DataVencimento)
           .ToList();
        }
    }

    private string FundoGrid(bool bolean)
    {
        if (bolean)
            return "background-color:beige";
        else
            return "background-color:white";

    }

    private void MudarPagina(int pag)
    {
        if(pag>0 && pag<=TotalPages)
        {
            PagAtual = pag;
            AtualizarLista();
        }
    }

    public void Dispose()
    {
        HabilitaConsultaTelegram = false;
    }


}
