@page "/contasar/{tarefa:int?}"
@rendermode InteractiveServer
@using Compartilhado.Enums
@inject ApplicationDbContext _context
@attribute [StreamRendering]


<PageTitle>Contas a Receber</PageTitle>

<div class="row">
    <div class="col-md-3 mb-3">
        <a href="/contasar/salvar" class="btn btn-primary">Novo AReceber</a>
    </div>

    <div class="col-md-2 mb-3">
        <label class="Honorarios-css">
            <InputCheckbox @bind-Value="Honorarios" @onclick="Atualiza" />
            Honorarios
        </label>
    </div>
    
    <div class="col-md-2 mb-3">
        <label class="Sucumbencia-css">
            <InputCheckbox @bind-Value="Sucumbencia" @onclick="Atualiza" />
            Sucumbencia
        </label>
    </div>
   
    <div class="col-md-2 mb-3">
        <label class="Alvara-css">
            <InputCheckbox @bind-Value="Alvara" @onclick="Atualiza" />
            Alvara
        </label>
    </div>
   
    <div class="col-md-3 mb-3 row" style="text-align: end;">
        <a>Aberta: @Recebimentos.Where(s => s.Status == 'A' && lst.Contains((int)s.TipoRecebimento)).Sum(x => x.Total).ToString("n2")</a>
        <a>Fechado: @Recebimentos.Where(s => s.Status == 'B' && lst.Contains((int)s.TipoRecebimento)).Sum(x => x.Total).ToString("n2")</a>
        <a>Total: @Recebimentos.Where(x => lst.Contains((int)x.TipoRecebimento)).Sum(x => x.Total).ToString("c")</a>
    </div>

</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <td>Id</td>
                <td>Descricao</td>
                <td>Total</td>
                <td>Status</td>
                <td>Parcela</td>
                <td>Tarefa</td>
                <td>Cliente</td>
                <td>*</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in Model)
            {
                <tr class="@RetornaClass(r.TipoRecebimento)">
                
                    <td>@r.Id</td>
                    <td>@r.Descricao</td>
                    <td>@r.Total.ToString("n2")</td>
                    <td>@r.Status</td>
                    <td>@r.Parcela</td>
                    <td>@r.Tarefa?.Descricao</td>
                    <td>@r.Pessoa?.Nome </td>
                    <td><a class="link-secondary" href="/contasar/salvar/@r.Id">Editar</a></td>
                </tr>
            }
            
        </tbody>
    </table>

</div>


<nav >
    <ul class="pagination justify-content-center">
        <li class="@(PagAtual==1 ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual-1))" tabindex="-1">Anterior</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            int pag = i;
            <li class="page-item"><a class="page-link" @onclick="@(() => MudarPagina(pag))">@i</a></li>
        }
        <li class="@(TotalPages==PagAtual ? "page-item disabled" : "page-item")">
            <a class="page-link" @onclick="@(() => MudarPagina(PagAtual+1))">Próximo</a>
        </li>
    </ul>
</nav>


@code {
    [Parameter]
    public int Tarefa { get; set; }
    // [Parameter]
    // public int Tipo { get; set; }  //tipo recebimento
    private bool _honorarios;
    public bool Honorarios { get { return _honorarios; } set { _honorarios = value; Atualiza(); } }
    private bool _sucubencia;
    public bool Sucumbencia { get { return _sucubencia; } set { _sucubencia = value; Atualiza(); } }
    private bool _alvara;
    public bool Alvara { get { return _alvara; } set { _alvara = value; Atualiza(); } }

    public int PagAtual { get; set; } = 1;
    public int Pegar { get; set; }
    public int TotalPages { get; set; }


    public List<ContasAReceber> Model { get; set; } = new();
    public List<ContasAReceber> Recebimentos { get; set; } = new();
    public List<int> lst { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        if (Pegar == 0)
            Pegar = 7;


        Recebimentos = await _context.Recebimentos.AsNoTracking().Include(p => p.Pessoa).Include(t => t.Tarefa).ToListAsync();

        TotalPages = (int)Math.Ceiling(Recebimentos.Count / (decimal)Pegar);

        Atualiza();
    }


    private string RetornaClass(RecebimentoEnum rec)
    {
        if (rec == RecebimentoEnum.Honorarios)
            return "Honorarios-css";
        else if (rec == RecebimentoEnum.Sucumbencia)
            return "Sucumbencia-css";
        else
            return "Alvara-css";
    }
    private void CarregaTipos()
    {
        lst.Clear();

        if (Honorarios)
            lst.Add(1);
        if (Sucumbencia)
            lst.Add(2);
        if (Alvara)
            lst.Add(3);

    }


    private void Atualiza()
    {
        CarregaTipos();

        int totalList =  Recebimentos.Where(x => lst.Contains((int)x.TipoRecebimento)).Count();
        TotalPages = (int)Math.Ceiling(totalList / (decimal)Pegar);

        Model = Recebimentos.Where(x => lst.Contains((int)x.TipoRecebimento))
        .Skip((PagAtual - 1) * Pegar).Take(Pegar).ToList();
    }

    private void MudarPagina(int pag)
    {
        if (pag > 0 && pag <= TotalPages)
        {
            PagAtual = pag;
            Atualiza();
        }

    }


}
